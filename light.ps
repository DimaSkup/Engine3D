//////////////////////////////////
// Filename: light.ps
// Revising: 18.04.22
//////////////////////////////////

//////////////////////////////////
// GLOBALS
//////////////////////////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float  specularPower;
	float4 specularColor;
};

//////////////////////////////////
// TYPEDEFS
//////////////////////////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex      : TEXCOORD0;
	float3 normal   : NORMAL;
	float3 viewDirection : TEXCOORD1;
};

//////////////////////////////////
// Pixel Shader
//////////////////////////////////
float4 LightPixelShader(PixelInputType input): SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float  lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

	// sample the pixel color from the texture using the sampler at this texture coordinate location
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// Set the default output colour to the ambient light value for all pixels
	color = ambientColor;

	// Initialize the specular color
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// invert the light direction for calculations
	lightDir = -lightDirection;

	// calculate the amount of light on this pixel
	lightIntensity = saturate(dot(input.normal, lightDir));

	// it the N dot L is greater that zero we add the diffuse color to the ambient color
	if (lightIntensity > 0.0f)
	{
		// determine the final diffuse color based of the diffuse color and the amount of light intensity
		color += (diffuseColor * lightIntensity);

		// saturate the ambient and diffuse colour
		color = saturate(color);

		// calculate the reflection vector based on the light intensity, normal vector, and light direction
		reflection = normalize(2 * lightIntensity * input.normal - lightDir);

		// determine the amount of specular light based on the reflection vector, viewing direction, and specular power
		specular = pos(saturate(dot(reflection, input.viewDirection)), specularPower);
	}

	// multiply the texture pixel and the final diffuse color to get the final pixel color result
	color = color * textureColor;

	// add the specular component last to the output color
	color = saturate(color + specular);

	return color;
}